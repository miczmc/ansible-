---
- name: Déploiement et configuration de l'agent Zabbix
  hosts: all
  become: true
  
  vars:
    zabbix_server_ip: "{{ zabbix_server | default('localhost') }}"
    zabbix_agent_hostname: "{{ ansible_hostname }}"
    zabbix_agent_hostmetadata: "Linux"
    
  tasks:
    - name: Installer les dépendances système
      package:
        name:
          - wget
          - curl
        state: present
        
    - name: Télécharger et installer le package de repository Zabbix (Debian/Ubuntu)
      get_url:
        url: "https://repo.zabbix.com/zabbix/7.0/debian/pool/main/z/zabbix-release/zabbix-release_7.0-2+debian12_all.deb"
        dest: /tmp/zabbix-release.deb
      when: ansible_os_family == "Debian"
      
    - name: Installer le package repository Zabbix (Debian/Ubuntu)
      apt:
        deb: /tmp/zabbix-release.deb
        state: present
      when: ansible_os_family == "Debian"
      
    - name: Ajouter le repository Zabbix (RedHat/CentOS)
      yum:
        name: "https://repo.zabbix.com/zabbix/7.0/rhel/{{ ansible_distribution_major_version }}/x86_64/zabbix-release-7.0-2.el{{ ansible_distribution_major_version }}.noarch.rpm"
        state: present
      when: ansible_os_family == "RedHat"
      
    - name: Mettre à jour le cache des packages
      package:
        update_cache: yes
        
    - name: Arrêter l'ancien agent Zabbix s'il existe
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: no
      loop:
        - zabbix-agent
        - zabbix-agentd
      ignore_errors: yes
      
    - name: Supprimer les anciens packages Zabbix
      package:
        name:
          - zabbix-agent
          - zabbix-agentd
        state: absent
      ignore_errors: yes
      
    - name: Nettoyer les fichiers de configuration obsolètes
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/zabbix/zabbix_agentd.conf
        - /etc/zabbix/zabbix_agentd.d
      ignore_errors: yes
        
    - name: Installer l'agent Zabbix (dernière version disponible)
      package:
        name: zabbix-agent2
        state: latest
        force: yes
        
    - name: Configurer l'agent Zabbix
      lineinfile:
        path: /etc/zabbix/zabbix_agent2.conf
        regexp: '^Server='
        line: 'Server={{ zabbix_server_ip }}'
        backup: yes
      notify: restart zabbix-agent2
        
    - name: Configurer ServerActive
      lineinfile:
        path: /etc/zabbix/zabbix_agent2.conf
        regexp: '^ServerActive='
        line: 'ServerActive={{ zabbix_server_ip }}'
      notify: restart zabbix-agent2
        
    - name: Configurer Hostname
      lineinfile:
        path: /etc/zabbix/zabbix_agent2.conf
        regexp: '^Hostname='
        line: 'Hostname={{ zabbix_agent_hostname }}'
      notify: restart zabbix-agent2
        
    - name: Configurer HostMetadata
      lineinfile:
        path: /etc/zabbix/zabbix_agent2.conf
        regexp: '^HostMetadata='
        line: 'HostMetadata={{ zabbix_agent_hostmetadata }}'
      notify: restart zabbix-agent2
        
    - name: Activer les commandes à distance
      lineinfile:
        path: /etc/zabbix/zabbix_agent2.conf
        regexp: '^EnableRemoteCommands='
        line: 'EnableRemoteCommands=1'
      notify: restart zabbix-agent2
        
    - name: Logger les commandes à distance
      lineinfile:
        path: /etc/zabbix/zabbix_agent2.conf
        regexp: '^LogRemoteCommands='
        line: 'LogRemoteCommands=1'
      notify: restart zabbix-agent2
        
    - name: Créer le répertoire de configuration personnalisée
      file:
        path: /etc/zabbix/zabbix_agent2.d
        state: directory
        owner: zabbix
        group: zabbix
        mode: '0755'
        
    - name: Vérifier la configuration de l'agent
      command: zabbix_agent2 -t {{ item }}
      loop:
        - "system.uname"
        - "agent.ping"
      register: zabbix_test_result
      failed_when: zabbix_test_result.rc != 0
      
    - name: Démarrer et activer le service Zabbix Agent
      systemd:
        name: zabbix-agent2
        state: started
        enabled: yes
        daemon_reload: yes
        
    - name: Vérifier le statut du service
      systemd:
        name: zabbix-agent2
      register: zabbix_service_status
      
    - name: Afficher le statut du service
      debug:
        msg: "Service Zabbix Agent: {{ zabbix_service_status.status.ActiveState }}"
        
    - name: Vérifier la connectivité avec le serveur Zabbix
      wait_for:
        host: "{{ zabbix_server_ip }}"
        port: 10051
        timeout: 10
      ignore_errors: yes
      register: zabbix_connectivity
      
            
    - name: Afficher le résultat de connectivité
      debug:
        msg: "Connectivité avec le serveur Zabbix {{ zabbix_server_ip }}:10051 - {{ 'OK' if zabbix_connectivity.failed == false else 'ÉCHEC' }}"

  handlers:
    - name: restart zabbix-agent2
      systemd:
        name: zabbix-agent2
        state: restarted
